<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="shopReply">
	
	<!-- 시퀀스 -->
	<select id="seq" resultType="int">
		select shop_reply_seq.nextval from dual
	</select>

	<!-- shop_reply_no, member_id, shop_no, shop_reply_content, shop_reply_time,
			shop_reply_superno, shop_reply_groupno, shop_reply_depth -->
	<!-- 댓글 작성 -->
	<insert id="insert" parameterType="ShopReplyDto">
		insert into shop_reply values( shop_reply_seq.nextval,
			#{memberId}, 38, #{shopReplyContent},
			sysdate, null, 0, 0
		)
		
	</insert>	
	
	<select id="list" resultType="ShopReplyDto">
		select * from shop_reply
	</select>
	
	<!-- 댓글 수정 -->
	<update id="update" parameterType="map">
		update shop_reply set shop_reply_content = #{content}
		where member_id = #{memberId}
	</update>
	
	<!-- 댓글 삭제 -->	
	<delete id="delete" parameterType="int">
		delete from shop_reply where shop_reply_no = ${shopReplyNo}
	</delete>
		
		<!--  수정을 위한 단일조회 -->
		<select id="get"  parameterType="int" resultType="ShopReplyDto">
			select * from shop_reply where shop_reply_no = ${shopReplyNo}
		</select>

</mapper>









