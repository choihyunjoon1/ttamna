<?xml version="1.0" encoding="UTF-8" ?> 

<!-- mybatis mapper 파일
	- DBMS에서 실행할 SQL구문을 저장하는 XML파일 
	- namespace를 통해서 여러개의 매퍼를 구분한다
	- 테이블 당 한 개씩 만드는 것이 일반적이면 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다
 	- <insert>, <select>, <update>, <delete>를 이용해서 CRUD 구문을 작성한다
 	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다
 	- parameterType : 구문을 실행하기 위해 필요한 데이터의 형태 
 	- resultType : 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다
 -->

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybaby">
	<!-- 목록(더보기,검색없이) -->
	<select id="list" resultType="MybabyDto">
		select * from mybaby order by mybaby_no desc
	</select>
	
	<!-- 게시글번호 시퀀스 미리 조회 -->
	<select id="seq" resultType="int">
		select mybaby_seq.nextval from dual
	</select>
	
	<!-- 게시글등록 -->
	<insert id = "write" parameterType="MybabyDto">
		insert into mybaby(mybaby_no, mybaby_writer, mybaby_title, mybaby_content, mybaby_time, mybaby_read, mybaby_reply, mybaby_type)
		 values(#{mybabyNo},#{mybabyWriter},#{mybabyTitle},#{mybabyContent},sysdate,0,0,'mybaby')
	</insert>
	
	<!-- 상세조회 -->
	<select id="search" parameterType="int" resultType="MybabyDto">
		select * from mybaby where mybaby_no=#{mybabyNo}
	</select>
	<!-- 목록+더보기페이징 -->
<!-- 	<select id="listByPage" parameterType="map" resultType="MybabyDownVO"> -->
<!-- 		select -->
<!-- 		    mybaby_img_no,mybaby_img_upload,mybaby_img_size,mybaby_img_type, -->
<!-- 		    mybaby_no,mybaby_writer,mybaby_title,mybaby_time,mybaby_reply,mybaby_type, -->
<!-- 		    mybaby_like -->
<!-- 		from( -->
<!-- 		    select rownum rn2, tmp.* from( -->
<!-- 		        select * from ( -->
<!-- 		            select * from ( -->
<!-- 		                select BI.*, row_number() over(partition by mybaby_no order by mybaby_no asc) rn  from mybaby_img BI) where rn = 1) MBI  -->
<!-- 		                    left outer join mybaby B  on B.mybaby_no = MBI.mybaby_no -->
<!-- 		                    left outer join ( -->
<!-- 		                        select B.mybaby_no,nvl(LI,0)mybaby_like from mybaby B -->
<!-- 		                            left outer join ( -->
<!-- 		                                select ML.mybaby_no,count(member_id)LI from mybaby_like  ML group by ML.mybaby_no -->
<!-- 		                                    )ML2 on ML2.mybaby_no = B.mybaby_no) -->
<!-- 		                    MLC on MBI.mybaby_no=MLC.mybaby_no -->
<!-- 		        )tmp -->
<!-- 		)where rn2 between ${startRow} and ${endRow} -->
<!-- 	</select> -->
	<select id="listByPage" parameterType="map" resultType="MybabyDownVo">
		select 
		    mybaby_img_no,mybaby_img_upload,mybaby_img_size,mybaby_img_type,
		    mybaby_no,mybaby_writer,mybaby_title,mybaby_time,mybaby_reply,mybaby_type,
		    mybaby_like
		from(
		    select rownum rn2, tmp.* from(
		        select * from (
		            select * from (
		                select BI.*, row_number() over(partition by mybaby_no order by mybaby_no asc) rn  from mybaby_img BI) where rn = 1) MBI 
		                    left outer join mybaby B  on B.mybaby_no = MBI.mybaby_no
		                    left outer join (
		                        select B.mybaby_no,nvl(LI,0)mybaby_like from mybaby B
		                            left outer join (
		                                select ML.mybaby_no,count(member_id)LI from mybaby_like  ML group by ML.mybaby_no
		                                    )ML2 on ML2.mybaby_no = B.mybaby_no)
		                    MLC on MBI.mybaby_no=MLC.mybaby_no order by mybaby_like desc
		        )tmp 
		)where rn2 between 1 and 3
		UNION ALL
		select
		    mybaby_img_no,mybaby_img_upload,mybaby_img_size,mybaby_img_type,
		    mybaby_no,mybaby_writer,mybaby_title,mybaby_time,mybaby_reply,mybaby_type,
		    mybaby_like
		from(
		    select rownum rn2, tmp.* from(
		        select * from (
		            select * from (
		                select BI.*, row_number() over(partition by mybaby_no order by mybaby_no asc) rn  from mybaby_img BI) where rn = 1) MBI 
		                    left outer join mybaby B  on B.mybaby_no = MBI.mybaby_no
		                    left outer join (
		                        select B.mybaby_no,nvl(LI,0)mybaby_like from mybaby B
		                            left outer join (
		                                select ML.mybaby_no,count(member_id)LI from mybaby_like  ML group by ML.mybaby_no
		                                    )ML2 on ML2.mybaby_no = B.mybaby_no)
		                    MLC on MBI.mybaby_no=MLC.mybaby_no
		        )tmp
		)where rn2 between ${startRow} and ${endRow}
	</select>
	<!-- 더보기 페이지네이션 -->
	<select id="listBySearchPage" parameterType="map" resultType="MybabyDownVO">
<!-- 		select -->
<!-- 		    mybaby_img_no,mybaby_img_upload,mybaby_img_size,mybaby_img_type, -->
<!-- 		    mybaby_no,mybaby_writer,mybaby_title,mybaby_time,mybaby_reply,mybaby_type, -->
<!-- 		    mybaby_like -->
<!-- 		from( -->
<!-- 		    select rownum rn2, tmp.* from( -->
<!-- 		        select * from ( -->
<!-- 		            select * from ( -->
<!-- 		                select BI.*, row_number() over(partition by mybaby_no order by mybaby_no asc) rn  from mybaby_img BI) where rn = 1) MBI  -->
<!-- 		                    left outer join mybaby B  on B.mybaby_no = MBI.mybaby_no -->
<!-- 		                    left outer join ( -->
<!-- 		                        select B.mybaby_no,nvl(LI,0)mybaby_like from mybaby B -->
<!-- 		                            left outer join ( -->
<!-- 		                                select ML.mybaby_no,count(member_id)LI from mybaby_like  ML group by ML.mybaby_no -->
<!-- 		                                    )ML2 on ML2.mybaby_no = B.mybaby_no) -->
<!-- 		                    MLC on MBI.mybaby_no=MLC.mybaby_no -->
<!-- 		                    where instr(${column}, #{keyword}) > 0  -->
<!-- 		        )tmp -->
<!-- 		)where rn2 between ${startRow} and ${endRow} -->
		select 
		    mybaby_img_no,mybaby_img_upload,mybaby_img_size,mybaby_img_type,
		    mybaby_no,mybaby_writer,mybaby_title,mybaby_time,mybaby_reply,mybaby_type,
		    mybaby_like
		from(
		    select rownum rn2, tmp.* from(
		        select * from (
		            select * from (
		                select BI.*, row_number() over(partition by mybaby_no order by mybaby_no asc) rn  from mybaby_img BI) where rn = 1) MBI 
		                    left outer join mybaby B  on B.mybaby_no = MBI.mybaby_no
		                    left outer join (
		                        select B.mybaby_no,nvl(LI,0)mybaby_like from mybaby B
		                            left outer join (
		                                select ML.mybaby_no,count(member_id)LI from mybaby_like  ML group by ML.mybaby_no
		                                    )ML2 on ML2.mybaby_no = B.mybaby_no)
		                    MLC on MBI.mybaby_no=MLC.mybaby_no order by mybaby_like desc
		        )tmp 
		)where rn2 between 1 and 3
		UNION ALL
		select
		    mybaby_img_no,mybaby_img_upload,mybaby_img_size,mybaby_img_type,
		    mybaby_no,mybaby_writer,mybaby_title,mybaby_time,mybaby_reply,mybaby_type,
		    mybaby_like
		from(
		    select rownum rn2, tmp.* from(
		        select * from (
		            select * from (
		                select BI.*, row_number() over(partition by mybaby_no order by mybaby_no asc) rn  from mybaby_img BI) where rn = 1) MBI 
		                    left outer join mybaby B  on B.mybaby_no = MBI.mybaby_no
		                    left outer join (
		                        select B.mybaby_no,nvl(LI,0)mybaby_like from mybaby B
		                            left outer join (
		                                select ML.mybaby_no,count(member_id)LI from mybaby_like  ML group by ML.mybaby_no
		                                    )ML2 on ML2.mybaby_no = B.mybaby_no)
		                    MLC on MBI.mybaby_no=MLC.mybaby_no
		                    where instr(${column}, #{keyword}) > 0
		        )tmp
		)where rn2 between ${startRow} and ${endRow}

	</select>
	
	<!-- 게시글 삭제 -->
	<delete id="delete" parameterType="int">
		delete mybaby where mybaby_no=#{mybabyNo}
	</delete>
	
	<!-- 게시글 수정 -->
	<update id="edit" parameterType="MybabyDto">
		update mybaby
			<set>
				<if test="mybabyTitle != null">
					mybaby_title = #{mybabyTitle},
				</if>
				<if test="mybabyContent != null">
					mybaby_content = #{mybabyContent},
				</if>
			</set>
		where mybaby_no=#{mybabyNo}
	</update>
	
	<!-- 이미지뽑는 리스트 -->
	<select id="listPlusImg" resultType="MybabyDownVO">
		select * from mybaby B left outer join mybaby_img BI on B.mybaby_no = BI.mybaby_no
	</select>
	
	<!-- 이미지 리스트+검색용 -->
	<select id = "searchList" parameterType = "map" resultType="MybabyDownVO">
        select * from mybaby B left outer join mybaby_img BI on B.mybaby_no = BI.mybaby_no
        <if test="column != null and keyword != null">
        	where instr(${column}, #{keyword}) > 0
        </if>
        order by B.mybaby_no desc
	</select>
	<!-- 댓글수 증가 -->
	<update id="replyUpdate" parameterType="int">
		update mybaby set mybaby_reply = mybaby_reply+1 where mybaby_no = #{mybabyNo}
	</update>
	<!-- 댓글수 감소 -->
	<update id="replyDelete" parameterType="int">
		update mybaby set mybaby_reply = mybaby_reply-1 where mybaby_no=#{mybabyNo}
	</update>
	
	<select id="mainBoard" resultType="MybabyDownVO">
		select * from(
		    select rownum rn2, tmp.* from(
		        select MY.*, MIF.mybaby_img_no from  mybaby MY left outer join mybaby_img_first MIF on MY.mybaby_no = MIF.mybaby_no where rn = 1
		        order by MY.mybaby_no desc
		    )tmp
		)where rn2 between 1 and 3
	</select>
	
</mapper>

