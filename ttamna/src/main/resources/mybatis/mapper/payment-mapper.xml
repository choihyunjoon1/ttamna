<?xml version="1.0" encoding="UTF-8" ?> 

<!-- mybatis mapper 파일
	- DBMS에서 실행할 SQL구문을 저장하는 XML파일 
	- namespace를 통해서 여러개의 매퍼를 구분한다
	- 테이블 당 한 개씩 만드는 것이 일반적이면 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다
 	- <insert>, <select>, <update>, <delete>를 이용해서 CRUD 구문을 작성한다
 	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다
 	- parameterType : 구문을 실행하기 위해 필요한 데이터의 형태 
 	- resultType : 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다
 -->

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pay">
	
	<select id="seq" resultType="int">
		select payment_seq.nextval from dual
	</select>

	<insert id="insert" parameterType="PaymentDto">
		insert into payment values(
			#{payNo}, #{tid}, #{memberId}, #{itemName}, #{totalAmount}, sysdate, '결제완료'
		)
	</insert>
	
	<select id="list" resultType="PaymentDto">
		select * from payment order by pay_no asc
	</select>
	
	<select id="get" parameterType="int" resultType="PaymentDto">
		select * from payment where pay_no = #{payNo}
	</select>
	
	<!-- 
		1. buyNo를 이용하여 buy_detail 테이블의 상품 상태를 조회
		2. 조회 결과에 따라 다음과 같이 수정
			- 상품개수 == 취소개수 : 전체취소
			- 상품개수 == 결제개수 : 결제완료
			- 나머지 : 부분취소 
			
		전체 개수 파악 구문 : select count(*) from buy_detail where buy_no = #{no}
		취소 개수 파악 구문 : select count(*) from buy_detail where buy_no = #{no} and status = '취소'
		결제 개수 파악 구문 : select count(*) from buy_detail where buy_no = #{no} and status = '결제'
	 -->
	<update id="refresh" parameterType="int">
		update payment
<!-- 	set status = '결제완료' or '부분취소' or '전체취소' -->
		set status = 
		case
			when (select count(*) from pay_detail where pay_no = #{no}) = (select count(*) from pay_detail where pay_no = #{payNo} and status = '결제') 
				then '결제완료'
			when (select count(*) from pay_detail where pay_no = #{no}) = (select count(*) from pay_detail where pay_no = #{payNo} and status = '취소') 
				then '전체취소'
			else '부분취소'
		end
		where pay_no = #{payNo}
	</update>
	
</mapper>

