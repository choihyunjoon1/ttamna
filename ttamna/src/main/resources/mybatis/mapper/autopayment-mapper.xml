<?xml version="1.0" encoding="UTF-8" ?> 

<!-- mybatis mapper 파일
	- DBMS에서 실행할 SQL구문을 저장하는 XML파일 
	- namespace를 통해서 여러개의 매퍼를 구분한다
	- 테이블 당 한 개씩 만드는 것이 일반적이면 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다
 	- <insert>, <select>, <update>, <delete>를 이용해서 CRUD 구문을 작성한다
 	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다
 	- parameterType : 구문을 실행하기 위해 필요한 데이터의 형태 
 	- resultType : 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다
 -->

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="apm">

	<!-- 정기결제 테이블에 데이터 등록 -->
		<insert id="insert" parameterType="AutoPayMentDto">
			insert into autopayment values(
				auto_payment_seq.nextval, #{partnerUserId}, #{autoSid}, 1, 
				${autoTotalAmount}, sysdate, 1, ${donationNo}
			)
		</insert>
		
		<!-- 정기결제 테이블 목록 불러오기 -->
		<select id="list" resultType="AutoPayMentDto">
			select * from autopayment
		</select>
		
		<!-- 정기결제가 진행 될 때 마다 payTimes를 +1씩 추가 -->
		<update id="update" parameterType="map">
			update autopayment 
			set
			pay_times = pay_times+1
			where auto_no = ${autoNo}
		</update>
		
		<!-- 특정 회원의 정기결제 목록을 불러오기 -->
		<select id="listByMember" parameterType="String" resultType="AutoPayMentDto">
			select * from autopayment where partner_user_id = #{memberId}
		</select>
		<!-- 특정 회원의 정기결제 정보 1개 가져오기 -->
		<select id="get" parameterType="String" resultType="AutoPayMentDto">
			select * from autopayment where auto_sid = #{sid}
		</select>
		
		<!-- 회원목록 + 검색 + 페이지네이션 -->
		<select id="listPaging" parameterType="map" resultType="AutoPayMentDto">
			select * from (
				select rownum rn, TMP.* from (
					select * from autopayment 
						where partner_user_id=#{memberId}
					order by auto_no asc
				)TMP
			) where rn between #{startRow} and #{endRow}		
		</select>
		<!-- 블록구하기 -->
		<select id="count"  parameterType="String" resultType="int">
			select count(*) from autopayment where partner_user_id=#{memberId}
		</select>
	
		<!-- 정기결제 해지 -->
		<delete id="autoPayDelete" parameterType="String">
			delete autopayment where auto_sid = #{sid}
		</delete>
		
		<!-- 이번달 일별 정기 기부금액 -->
		<select id="thisMonthDaily" resultType="RegularChartVO">
		  select
			 d.dt "thisMonthDate",
			 nvl(p.daily, 0) "thisMonthDailyAmount"
			from
			    (select 
			        to_char(trunc(sysdate, 'MM') + level - 1, 'YY/MM/DD') dt ,
			        to_char(to_date(trunc(sysdate, 'MM'), 'YY/MM/DD') + rownum - 1, 'month')
			    from dual <![CDATA[connect by level <= (last_day(sysdate) - trunc(sysdate, 'MM') +1 )]]>)d
			left outer join 
			    (select 
			        to_char(first_payment_date, 'YY/MM/DD') dt, 
			        to_char(first_payment_date, 'DAY') dow,
	                sum(auto_total_amount * pay_times) daily
			      from autopayment 
			    group by to_char(first_payment_date, 'YY/MM/DD'), to_char(first_payment_date, 'DAY'))p
			on p.dt = d.dt 
	    order by d.dt asc
		</select>
		
		<!-- 이번달 누적 정기 기부금액 -->
		<select id="thisMonth" resultType="RegularChartVO">
		select 
      to_char((TO_DATE(sysdate,'YYYY-MM-DD')), 'month') "thisMonth", 
      sum("sum") "thisMonthAmount" 
      from (
		select
		 d.dt "date",
		 nvl(p.daily, 0) "sum"
		from
		    (select 
		        to_char(trunc(sysdate, 'MM') + level - 1, 'YY/MM/DD') dt ,
		        to_char(to_date(trunc(sysdate, 'MM'), 'YY/MM/DD') + rownum - 1, 'month') mth
		    from dual <![CDATA[connect by level <= (last_day(sysdate) - trunc(sysdate, 'MM') +1 )]]>)d
		left outer join 
		    (select 
		        to_char(first_payment_date, 'YY/MM/DD') dt, 
		        to_char(first_payment_date, 'DAY') dow,
                sum(auto_total_amount * pay_times) daily
		      from autopayment 
		    group by to_char(first_payment_date, 'YY/MM/DD'), to_char(first_payment_date, 'DAY'))p
		on p.dt = d.dt )
		</select>

		<!-- 12개월간 월별 누적 정기 기부금액 -->
		<select id="moy" resultType="RegularChartVO">
		 select
			d.mth "moy",
			nvl(p.monthly, 0) "moyAmount"
		   from
			    (select 
			        to_char(add_months(to_date(sysdate, 'YY/MM/DD'), - (level-1)-1), 'month') mth 
			      from dual
			       <![CDATA[ connect by add_months(to_date(sysdate, 'YY/MM/DD'), - (level-1)-1) >= add_months(to_date(sysdate, 'YY/MM/DD'), -11)]]>)d
			left outer join
			    (select 
			        to_char(first_payment_date, 'month') mth,
			        sum(auto_total_amount) monthly
			    from autopayment
	            group by to_char(first_payment_date, 'month'))p
			on p.mth = d.mth 
			order by lpad(d.mth, 2, '0')
		</select>
		
		<!-- 정기결제 기간 검색 -->
		<select id="searchDate" resultType="RegularChartVO">
		 select
	        d.dt "date",
	        nvl(p.daily, 0) "dailyAmount"
	   	 from
	   	 	(select 
	   	 		to_char(to_date(#{start}, 'YYYY/MM/DD') + level - 1, 'YYYY/MM/DD') dt
	          from dual 
	           <![CDATA[connect by level <= (to_date(#{end}, 'YYYY/MM/DD') - to_date(#{start},'YYYY/MM/DD') + 1)]]>)d
	     left outer join    
	        (select 
			        to_char(first_payment_date, 'YYYY/MM/DD') dt, 
	                sum(auto_total_amount) daily
			    from autopayment group by first_payment_date)p
	     on d.dt = p.dt order by d.dt asc
		</select>
		
		<!-- 총 누적 정기결제 금액 -->
		<select id="autoTotalAmount" resultType="long">
			select nvl(sum(auto_total_amount * pay_times), 0) from autopayment
		</select>
		
		
</mapper>
