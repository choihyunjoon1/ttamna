<?xml version="1.0" encoding="UTF-8" ?> 

<!-- mybatis mapper 파일
	- DBMS에서 실행할 SQL구문을 저장하는 XML파일 
	- namespace를 통해서 여러개의 매퍼를 구분한다
	- 테이블 당 한 개씩 만드는 것이 일반적이면 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다
 	- <insert>, <select>, <update>, <delete>를 이용해서 CRUD 구문을 작성한다
 	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다
 	- parameterType : 구문을 실행하기 위해 필요한 데이터의 형태 
 	- resultType : 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다
 -->

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	<!-- 회원가입 -->
	<insert id="join" parameterType="MemberDto">
		insert into member
				values(
					#{memberId}, #{memberPw}, #{memberNick}, 
					#{memberName}, #{memberPhone}, #{memberEmail},
					'일반회원', sysdate, sysdate,
					#{postcode},#{address},#{detailAddress}
					)
	</insert>
	<!-- 회원 탈퇴 -->
	<delete id="quit" parameterType="String">
		delete member where member_id=#{memberId}
	</delete>
	
	<!-- 정보수정 -->
	<update id="changeInfo" parameterType="MemberDto">
		update member
			set member_nick=#{memberNick}, 
				member_email = #{memberEmail},
				member_phone=#{memberPhone},
				postcode=#{postcode},
				address=#{address},
				detail_address=#{detailAddress}
			where member_id=#{memberId} 
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="changePw" parameterType="map">
		update member
			set member_pw = #{memberNewPw}
		where member_id=#{memberId}
	</update>
	
	<!-- 로그인(대충한거) -->
	<select id = "get" parameterType="String" resultType="MemberDto">
		select * from member where member_id=#{memberId}
	</select>
	
	<!-- 닉네임 단일조회 -->
	<select id = "getByNick" parameterType="String" resultType="MemberDto">
		select * from member where member_nick=#{memberNick}
	</select>
	
	<!-- 이메일 단일조회 -->
	<select id = "getByEmail" parameterType="String" resultType="MemberDto">
		select * from member where member_email=#{memberEmail}
	</select>

	<!-- 비밀번호 찾기 인증 완료 후 비밀번호 재설정 -->
	<update id="resetPw" parameterType="map">
		update member set member_pw = #{memberPw} where member_id = #{memberId}
	</update>
	
	<!-- 접속시간 저장을 위한 구문 -->
	<update id="lastLog" parameterType="String">
		update member set member_last_log = sysdate where member_id = #{memberId}
	</update>	
	
	<!-- 오늘날-접속일 = 335일 이상인 회원 찾기(테스트->3일) -->
	<select id="findDormancy" resultType="MemberDto">
		select * from member where to_date(sysdate,'yyyy-mm-dd')-to_date(member_last_log,'yyyy-mm-dd')>=3
	</select>
	
	<!-- 오늘날-접속일 = 365일인 회원 찾기(테스트->3일) -->
	<select id="processDormancy" resultType="MemberDto">
		select * from member where to_date(sysdate,'yyyy-mm-dd')-to_date(member_last_log,'yyyy-mm-dd')>=3
	</select>
	
	<!-- 휴면 -> 회원테이블로 이동 -->
	<insert id="insertDor" parameterType="MemberDto">
		insert into member values(
					#{memberId}, #{memberPw}, #{memberNick}, 
					#{memberName}, #{memberPhone}, #{memberEmail},
					#{memberGrade}, #{memberJoin}, sysdate,
					#{postcode},#{address},#{detailAddress}
					)
	</insert>
	
	
</mapper>

